library identifier: 'RHTAP_Jenkins@main', retriever: modernSCM(
[$class: 'GitSCMSource',
remote: 'https://${{values.gitlabHost}}/rhdh/tssc-sample-jenkins.git'])

pipeline {
    agent {
        kubernetes {
        defaultContainer 'jnlp'
        podRetention onFailure()
        customWorkspace "/home/jenkins/agent/workspace-${env.BUILD_ID}"
        yaml '''
            apiVersion: v1
            kind: Pod
            spec:
              containers:
              - name: jnlp
                image: quay.io/jkopriva/rhtap-jenkins-agent:0.1
                tty: true
                args: ["${computer.jnlpmac}","${computer.name}"]
                securityContext:
                  privileged: true
              - name: maven
                image: maven:3.8.6-openjdk-11
                command: ["cat"]
                tty: true
                securityContext:
                  privileged: true
            '''
        }
    }

    environment {
        ROX_API_TOKEN = credentials('ROX_API_TOKEN')
        GITOPS_AUTH_USERNAME = credentials('GITOPS_AUTH_USERNAME')
        GITOPS_AUTH_PASSWORD = credentials('GITOPS_AUTH_PASSWORD')
        QUAY_IO_CREDS = credentials('QUAY_IO_CREDS')
        COSIGN_SECRET_PASSWORD = credentials('COSIGN_SECRET_PASSWORD')
        COSIGN_SECRET_KEY = credentials('COSIGN_SECRET_KEY')
        COSIGN_PUBLIC_KEY = credentials('COSIGN_PUBLIC_KEY')
        TRUSTIFICATION_BOMBASTIC_API_URL = credentials('TRUSTIFICATION_BOMBASTIC_API_URL')
        TRUSTIFICATION_OIDC_ISSUER_URL = credentials('TRUSTIFICATION_OIDC_ISSUER_URL')
        TRUSTIFICATION_OIDC_CLIENT_ID = credentials('TRUSTIFICATION_OIDC_CLIENT_ID')
        TRUSTIFICATION_OIDC_CLIENT_SECRET = credentials('TRUSTIFICATION_OIDC_CLIENT_SECRET')
        DISABLE_ACS = false
        ROX_CENTRAL_ENDPOINT = 'central.tssc-acs.svc:443'
        POLICY_CONFIGURATION = 'github.com/enterprise-contract/config//rhtap-v0.6'
        REKOR_HOST = 'http://rekor-server.tssc-tas.svc'
        IGNORE_REKOR = false
        INFO = true
        STRICT = true
        TLSVERIFY = false
        DOCKERFILE = 'Dockerfile'
        CI_TYPE = 'jenkins'
        GITOPS_REPO_URL = 'https://${{values.gitlabHost}}/${{values.destination}}-gitops'
        GRPC_ENFORCE_ALPN_ENABLED = 'FALSE'
{%- if values.verifyCommits == 'enabled' %}
        TUF_MIRROR = 'http://tuf.tssc-tas.svc'
        KEYCLOAK_ISSUER_URL = 'https://${{values.ssoHost}}/realms/trusted-artifact-signer'
{%- endif %}
    }
    stages {

{%- if values.verifyCommits == 'enabled' %}
        stage('verify-commit') {
            steps {
                sh '''
                    GIT_COMMITTER_EMAIL=$(git log -1 --pretty=format:'%ae')
                    wget -q http://cli-server.trusted-artifact-signer.svc:8080/clients/linux/gitsign-amd64.gz
                    gunzip gitsign-amd64.gz && chmod a+x gitsign-amd64
                    cosign initialize --mirror=$TUF_MIRROR --root=$TUF_MIRROR/root.json
                    GITSIGN_REKOR_URL=$REKOR_HOST ./gitsign-amd64 verify --certificate-identity=$GIT_COMMITTER_EMAIL --certificate-oidc-issuer=$KEYCLOAK_ISSUER_URL $GIT_COMMIT
                    rm -rf gitsign*
                '''
            }
        }
{%- endif %}

        stage('mvn package') {
            steps {
                container('maven') {
                    sh 'mvn clean package'
                }
            }
        }

        stage('init') {
            steps {
                script {
                    env.IMAGE_URL = '${{values.quayHost}}/${{values.quayDestination}}:' + env.GIT_COMMIT
                    env.IMAGE = env.IMAGE_URL
                    def isoDate = sh(script: "date -u +%Y-%m-%dT%H:%M:%S.%3NZ", returnStdout: true).trim()
                    env.EFFECTIVE_TIME = isoDate
                    env.HOMEDIR = sh(script: 'pwd', returnStdout: true).trim()
                    println env.EFFECTIVE_TIME
                    rhtap.info('init')
                    rhtap.init()
                }
            }
        }

        stage('build') {
            steps {
                script {
                    rhtap.info('buildah_rhtap')
                    rhtap.buildah_rhtap()
                    rhtap.info('cosign_sign_attest')
                    rhtap.cosign_sign_attest()
                    env.PARAM_IMAGE = env.IMAGE
                    env.PARAM_IMAGE_DIGEST = sh(script: 'cat $(pwd)/results/buildah-rhtap/IMAGE_DIGEST', returnStdout: true).trim()
                }
            }
        }

        stage('deploy-and-upload-to-tpa') {
            parallel {
                stage('deploy') {
                    steps {
                        script {
                            rhtap.info('update_deployment')
                            rhtap.update_deployment()
                        }
                    }
                }
                stage('upload_sbom_to_trustification') {
                    environment {
                        SBOMS_DIR='./results/temp/files'
                    }
                    steps {
                        sh '''
                            find $SBOMS_DIR -type f -name "*.json" ! -name "*cyclonedx.json" -delete
                            jq '.metadata.component.name = "${{values.name}}"' $SBOMS_DIR/*.json > tmp && mv tmp $SBOMS_DIR/*.json
                        '''
                        script {
                            rhtap.info('upload_sbom_to_trustification')
                            rhtap.upload_sbom_to_trustification()
                        }
                    }
                }
            }
        }


        stage('acs') {
            environment {
                INSECURE_SKIP_TLS_VERIFY = 'true'
            }
            parallel {
                stage('acs_deploy_check') {
                    steps {
                        dir('acs_deploy_check') {
                            script {
                                rhtap.info('acs_deploy_check')
                                rhtap.acs_deploy_check()
                            }
                        }
                    }
                }
                stage('acs_image_check') {
                    steps {
                        dir('acs_image_check') {
                            script {
                                rhtap.info('acs_image_check')
                                rhtap.acs_image_check()
                            }
                        }
                    }
                }
                stage('acs_image_scan') {
                    steps {
                        dir('acs_image_scan') {
                            script {
                                rhtap.info('acs_image_scan')
                                rhtap.acs_image_scan()
                            }
                        }
                    }
                }
            }
        }

        stage('summary') {
            steps {
                script {
                    rhtap.info('show_sbom_rhdh')
                    rhtap.show_sbom_rhdh()
                    rhtap.info('summary')
                    rhtap.summary()
                }
            }
        }
    }
}